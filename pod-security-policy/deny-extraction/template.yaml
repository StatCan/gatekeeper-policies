apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: denyextraction
spec:
  crd:
    spec:
      names:
        kind: DenyExtraction
      validation:
        openAPIV3Schema:
          type: object
          properties:
            podLabels:
              type: array
              items:
                type: object
                properties:
                  key:
                    type: string
                  value:
                    type: string
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package denyextraction
        
        # What does this do?
        same(a, b) {
          a == b
        }

        # If we can't load the node metadata,
        # then we need to reject the request since we can't confirm.
        violation[{"msg": msg}] {
          subResources := ["attach", "exec"]

          not data.inventory.cluster.v1.Node["aks-userpb-67222117-vmss000002"].metadata.labels
          
          msg := sprintf("Node: %v", [data.inventory.cluster.v1.Node["aks-userpb-67222117-vmss000002"].metadata.labels])
        }

        violation[{"msg": msg}] {
          subResources := ["attach", "exec"]

          node := data.inventory
          sprintf("node: %v", [node])
          label := input.parameters.nodeLabels[_]

          matched := [found | found = node.metadata.labels[label.key] == label.value; found]
          count(matched) == count(input.parameters.nodeLabels)

          msg := sprintf("forbidden action <%v> on <%v/%v>", [input.review.requestSubResource, input.review.namespace, input.review.name])
        }
