apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: denyexternalusers
spec:
  crd:
    spec:
      names:
        kind: DenyExternalUsers
      validation:
        # Schema for the `parameters` field
        openAPIV3Schema:
          type: object
          properties:
            labels:
              type: array
              items: 
                type: string
            employeeDomains:
              type: array
              items: 
                type: string
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package denyexternalusers

        # RoleBinding Object
        violation[{"msg": msg}] {
          obj := input.review.object
          obj.kind == "RoleBinding"
          email := obj.subjects[_].name
          contains(email, "@")
          not isEmployee(email)
          ns := obj.metadata.namespace
          profile := data.inventory.cluster["kubeflow.org/v1"]["Profile"][ns]
          profileLabel := input.parameters.labels[_]
          profile.metadata.labels[profileLabel] == "true"
          msg := sprintf("Profile %v has %v=%v", [ns, profileLabel, profile.metadata.labels[profileLabel]])
        }

        # AuthorizationPolicy Object
        violation[{"msg": msg}] {
          obj := input.review.object
          obj.kind == "AuthorizationPolicy"
          email := obj.spec.rules[_]["when"][_]["values"][_]
          contains(email, "@")
          not isEmployee(email)
          ns := obj.metadata.namespace
          profile := data.inventory.cluster["kubeflow.org/v1"]["Profile"][ns]
          profileLabel := input.parameters.labels[_]
          profile.metadata.labels[profileLabel] == "true"
          msg := sprintf("Profile %v has %v=%v", [ns, profileLabel, profile.metadata.labels[profileLabel]])
        }

        # A user is considered an employee for this feature if one of the following is "true"
        # (1) user has a domain ending in statcan.gc.ca or cloud.statcan.ca, or
        # (2) user has a non-employee email, but is in an exception list of allowed users.
        isEmployee(email) {
          endswith(email, concat("@", [input.parameters.employeeDomains[_]]))
        }
        isEmployee(email) {
          # TODO: need to test that this actually works - might need to refactor
          exceptionList := data.inventory.cluster["v1"]["configmap"]["statcan-system"]["non-employee-exceptions"]["sasNotebookExceptions"]
          # If the namespace has purpose "system", then this policy does not apply.
          count([exceptionCase | exceptionCase := exceptionList[_]; exceptionCase == email]) > 0
        }